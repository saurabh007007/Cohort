Notes: 

CSS Layout Models: Flexbox, Grid, and Justify-Content

1. Flexbox (Flexible Box Layout)
   - Flexbox is a one-dimensional layout model used to design layouts in one direction at a time â€” either a row or a column.
   - It's great for distributing space and aligning items within a container.

   Key Concepts:
   - Container: The element with display: flex; or display: inline-flex;.
   - Items: The direct children of the flex container.
   - Direction: Controlled by flex-direction (row, column, etc.).

   Common Properties:
   - justify-content: Aligns items along the main axis.
   - align-items: Aligns items along the cross axis.
   - flex-wrap: Specifies whether items should wrap to the next line if there's insufficient space.

2. CSS Grid
   - CSS Grid is a two-dimensional layout system that allows you to design layouts both in rows and columns.
   - It's ideal for more complex layouts.

   Key Concepts:
   - Grid Container: The element with display: grid; or display: inline-grid;.
   - Grid Items: Direct children of the grid container.
   - Grid Lines: Invisible lines dividing the grid into cells.

   Common Properties:
   - grid-template-rows: Defines the number and size of rows.
   - grid-template-columns: Defines the number and size of columns.
   - gap: Adds space between rows and columns.

3. Justify-Content
   - This property is shared between Flexbox and CSS Grid and controls horizontal alignment of items within a container.

   Values:
   - flex-start: Aligns items to the start of the container.
   - flex-end: Aligns items to the end of the container.
   - center: Centers items horizontally.
   - space-between: Distributes items with space between them.
   - space-around: Distributes items with space around them.
   - space-evenly: Distributes items with equal space between, before, and after.

   Example in Flexbox:
   .container {
       display: flex;
       justify-content: center; /* Aligns items to the center */
   }

4. Responsiveness in Web Design
   - Responsiveness ensures that web content adapts seamlessly to different screen sizes and devices, providing an optimal user experience.

   Techniques for Responsive Design:
   - CSS Media Queries:
     - Media queries allow you to apply different styles based on the device's screen size or other properties.
     - Syntax:
     @media (condition) {
         /* Styles for the specified condition */
     }

